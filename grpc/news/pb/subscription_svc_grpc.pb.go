// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	Subscribe(ctx context.Context, in *NewsEmail, opts ...grpc.CallOption) (*SubscriptionResp, error)
	SearchSubscription(ctx context.Context, in *SearchSubscriptionReq, opts ...grpc.CallOption) (*SubscriptionsResp, error)
	SearchSubscriptionCount(ctx context.Context, in *SearchSubscriptionReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	DeleteSubscription(ctx context.Context, in *NewsEmail, opts ...grpc.CallOption) (*SubscriptionResp, error)
	SendContact(ctx context.Context, in *ContactReq, opts ...grpc.CallOption) (*ContactResp, error)
	SearchContact(ctx context.Context, in *ContactReq, opts ...grpc.CallOption) (*ContactsResp, error)
	SearchContactCount(ctx context.Context, in *ContactReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	GetPageContent(ctx context.Context, in *PageContentReq, opts ...grpc.CallOption) (*PageContentResp, error)
	UpdatePageContent(ctx context.Context, in *PageContentReq, opts ...grpc.CallOption) (*PageContentResp, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) Subscribe(ctx context.Context, in *NewsEmail, opts ...grpc.CallOption) (*SubscriptionResp, error) {
	out := new(SubscriptionResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) SearchSubscription(ctx context.Context, in *SearchSubscriptionReq, opts ...grpc.CallOption) (*SubscriptionsResp, error) {
	out := new(SubscriptionsResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/SearchSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) SearchSubscriptionCount(ctx context.Context, in *SearchSubscriptionReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/SearchSubscriptionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) DeleteSubscription(ctx context.Context, in *NewsEmail, opts ...grpc.CallOption) (*SubscriptionResp, error) {
	out := new(SubscriptionResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/DeleteSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) SendContact(ctx context.Context, in *ContactReq, opts ...grpc.CallOption) (*ContactResp, error) {
	out := new(ContactResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/SendContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) SearchContact(ctx context.Context, in *ContactReq, opts ...grpc.CallOption) (*ContactsResp, error) {
	out := new(ContactsResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/SearchContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) SearchContactCount(ctx context.Context, in *ContactReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/SearchContactCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) GetPageContent(ctx context.Context, in *PageContentReq, opts ...grpc.CallOption) (*PageContentResp, error) {
	out := new(PageContentResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/GetPageContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) UpdatePageContent(ctx context.Context, in *PageContentReq, opts ...grpc.CallOption) (*PageContentResp, error) {
	out := new(PageContentResp)
	err := c.cc.Invoke(ctx, "/pb.SubscriptionService/UpdatePageContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	Subscribe(context.Context, *NewsEmail) (*SubscriptionResp, error)
	SearchSubscription(context.Context, *SearchSubscriptionReq) (*SubscriptionsResp, error)
	SearchSubscriptionCount(context.Context, *SearchSubscriptionReq) (*NewsCountResp, error)
	DeleteSubscription(context.Context, *NewsEmail) (*SubscriptionResp, error)
	SendContact(context.Context, *ContactReq) (*ContactResp, error)
	SearchContact(context.Context, *ContactReq) (*ContactsResp, error)
	SearchContactCount(context.Context, *ContactReq) (*NewsCountResp, error)
	GetPageContent(context.Context, *PageContentReq) (*PageContentResp, error)
	UpdatePageContent(context.Context, *PageContentReq) (*PageContentResp, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) Subscribe(context.Context, *NewsEmail) (*SubscriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedSubscriptionServiceServer) SearchSubscription(context.Context, *SearchSubscriptionReq) (*SubscriptionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) SearchSubscriptionCount(context.Context, *SearchSubscriptionReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSubscriptionCount not implemented")
}
func (UnimplementedSubscriptionServiceServer) DeleteSubscription(context.Context, *NewsEmail) (*SubscriptionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) SendContact(context.Context, *ContactReq) (*ContactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContact not implemented")
}
func (UnimplementedSubscriptionServiceServer) SearchContact(context.Context, *ContactReq) (*ContactsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContact not implemented")
}
func (UnimplementedSubscriptionServiceServer) SearchContactCount(context.Context, *ContactReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContactCount not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetPageContent(context.Context, *PageContentReq) (*PageContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageContent not implemented")
}
func (UnimplementedSubscriptionServiceServer) UpdatePageContent(context.Context, *PageContentReq) (*PageContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePageContent not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Subscribe(ctx, req.(*NewsEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_SearchSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubscriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).SearchSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/SearchSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).SearchSubscription(ctx, req.(*SearchSubscriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_SearchSubscriptionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubscriptionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).SearchSubscriptionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/SearchSubscriptionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).SearchSubscriptionCount(ctx, req.(*SearchSubscriptionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).DeleteSubscription(ctx, req.(*NewsEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_SendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).SendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/SendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).SendContact(ctx, req.(*ContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_SearchContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).SearchContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/SearchContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).SearchContact(ctx, req.(*ContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_SearchContactCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).SearchContactCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/SearchContactCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).SearchContactCount(ctx, req.(*ContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_GetPageContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetPageContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/GetPageContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetPageContent(ctx, req.(*PageContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_UpdatePageContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).UpdatePageContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SubscriptionService/UpdatePageContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).UpdatePageContent(ctx, req.(*PageContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _SubscriptionService_Subscribe_Handler,
		},
		{
			MethodName: "SearchSubscription",
			Handler:    _SubscriptionService_SearchSubscription_Handler,
		},
		{
			MethodName: "SearchSubscriptionCount",
			Handler:    _SubscriptionService_SearchSubscriptionCount_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _SubscriptionService_DeleteSubscription_Handler,
		},
		{
			MethodName: "SendContact",
			Handler:    _SubscriptionService_SendContact_Handler,
		},
		{
			MethodName: "SearchContact",
			Handler:    _SubscriptionService_SearchContact_Handler,
		},
		{
			MethodName: "SearchContactCount",
			Handler:    _SubscriptionService_SearchContactCount_Handler,
		},
		{
			MethodName: "GetPageContent",
			Handler:    _SubscriptionService_GetPageContent_Handler,
		},
		{
			MethodName: "UpdatePageContent",
			Handler:    _SubscriptionService_UpdatePageContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/news/proto/subscription_svc.proto",
}
