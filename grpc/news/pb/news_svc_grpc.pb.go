// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsServiceClient is the client API for NewsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsServiceClient interface {
	GetAllCategories(ctx context.Context, in *NewsEmpty, opts ...grpc.CallOption) (*CategoriesResp, error)
	NewCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryResp, error)
	EditCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryResp, error)
	DeleteCategory(ctx context.Context, in *NewsIdInt, opts ...grpc.CallOption) (*CategoryResp, error)
	UndeleteCategory(ctx context.Context, in *NewsIdInt, opts ...grpc.CallOption) (*CategoryResp, error)
	ReorderCategories(ctx context.Context, in *CategoriesReq, opts ...grpc.CallOption) (*CategoriesResp, error)
	PublishNews(ctx context.Context, in *PublishNewsReq, opts ...grpc.CallOption) (*NewsResp, error)
	EditNews(ctx context.Context, in *PublishNewsReq, opts ...grpc.CallOption) (*NewsResp, error)
	DeleteNewsPost(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*NewsResp, error)
	GetFeaturedNews(ctx context.Context, in *NewsEmpty, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	GetNewsBySlug(ctx context.Context, in *Slug, opts ...grpc.CallOption) (*NewsViewResp, error)
	GetNewsById(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*NewsViewResp, error)
	GetNewsCategory(ctx context.Context, in *NewsCategoryReq, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	GetNewsSubCategory(ctx context.Context, in *NewsCategoryReq, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	AdminSearchNews(ctx context.Context, in *AdminSearchNewsReq, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	AdminSearchNewsCount(ctx context.Context, in *AdminSearchNewsReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	AdminSearchRelatedNews(ctx context.Context, in *AdminSearchRelatedNewsReq, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	AdminSearchRelatedNewsCount(ctx context.Context, in *AdminSearchRelatedNewsReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	SearchNews(ctx context.Context, in *SearchNewsReq, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	SearchNewsCount(ctx context.Context, in *SearchNewsReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	GetNewsByTag(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	GetNewsByTagCount(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	GetRelatedNews(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*ListNewsViewResp, error)
	GetNewsTags(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*NewsTagsResp, error)
	GetTagsNews(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*TagNewsResp, error)
	GetTagsNewsCount(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*NewsCountResp, error)
	ReorderFeatured(ctx context.Context, in *NewsOrders, opts ...grpc.CallOption) (*NewsOrdersResp, error)
	GetAllNewsUrls(ctx context.Context, in *NewsEmpty, opts ...grpc.CallOption) (*NewsUrlsResp, error)
}

type newsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsServiceClient(cc grpc.ClientConnInterface) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) GetAllCategories(ctx context.Context, in *NewsEmpty, opts ...grpc.CallOption) (*CategoriesResp, error) {
	out := new(CategoriesResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) NewCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryResp, error) {
	out := new(CategoryResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/NewCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) EditCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*CategoryResp, error) {
	out := new(CategoryResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/EditCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) DeleteCategory(ctx context.Context, in *NewsIdInt, opts ...grpc.CallOption) (*CategoryResp, error) {
	out := new(CategoryResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) UndeleteCategory(ctx context.Context, in *NewsIdInt, opts ...grpc.CallOption) (*CategoryResp, error) {
	out := new(CategoryResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/UndeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) ReorderCategories(ctx context.Context, in *CategoriesReq, opts ...grpc.CallOption) (*CategoriesResp, error) {
	out := new(CategoriesResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/ReorderCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) PublishNews(ctx context.Context, in *PublishNewsReq, opts ...grpc.CallOption) (*NewsResp, error) {
	out := new(NewsResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/PublishNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) EditNews(ctx context.Context, in *PublishNewsReq, opts ...grpc.CallOption) (*NewsResp, error) {
	out := new(NewsResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/EditNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) DeleteNewsPost(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*NewsResp, error) {
	out := new(NewsResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/DeleteNewsPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetFeaturedNews(ctx context.Context, in *NewsEmpty, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetFeaturedNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsBySlug(ctx context.Context, in *Slug, opts ...grpc.CallOption) (*NewsViewResp, error) {
	out := new(NewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsById(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*NewsViewResp, error) {
	out := new(NewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsCategory(ctx context.Context, in *NewsCategoryReq, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsSubCategory(ctx context.Context, in *NewsCategoryReq, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsSubCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) AdminSearchNews(ctx context.Context, in *AdminSearchNewsReq, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/AdminSearchNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) AdminSearchNewsCount(ctx context.Context, in *AdminSearchNewsReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/AdminSearchNewsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) AdminSearchRelatedNews(ctx context.Context, in *AdminSearchRelatedNewsReq, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/AdminSearchRelatedNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) AdminSearchRelatedNewsCount(ctx context.Context, in *AdminSearchRelatedNewsReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/AdminSearchRelatedNewsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) SearchNews(ctx context.Context, in *SearchNewsReq, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/SearchNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) SearchNewsCount(ctx context.Context, in *SearchNewsReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/SearchNewsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsByTag(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsByTagCount(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsByTagCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetRelatedNews(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*ListNewsViewResp, error) {
	out := new(ListNewsViewResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetRelatedNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNewsTags(ctx context.Context, in *NewsId, opts ...grpc.CallOption) (*NewsTagsResp, error) {
	out := new(NewsTagsResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetNewsTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetTagsNews(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*TagNewsResp, error) {
	out := new(TagNewsResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetTagsNews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetTagsNewsCount(ctx context.Context, in *NewsTagReq, opts ...grpc.CallOption) (*NewsCountResp, error) {
	out := new(NewsCountResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetTagsNewsCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) ReorderFeatured(ctx context.Context, in *NewsOrders, opts ...grpc.CallOption) (*NewsOrdersResp, error) {
	out := new(NewsOrdersResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/ReorderFeatured", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetAllNewsUrls(ctx context.Context, in *NewsEmpty, opts ...grpc.CallOption) (*NewsUrlsResp, error) {
	out := new(NewsUrlsResp)
	err := c.cc.Invoke(ctx, "/pb.NewsService/GetAllNewsUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsServiceServer is the server API for NewsService service.
// All implementations must embed UnimplementedNewsServiceServer
// for forward compatibility
type NewsServiceServer interface {
	GetAllCategories(context.Context, *NewsEmpty) (*CategoriesResp, error)
	NewCategory(context.Context, *Category) (*CategoryResp, error)
	EditCategory(context.Context, *Category) (*CategoryResp, error)
	DeleteCategory(context.Context, *NewsIdInt) (*CategoryResp, error)
	UndeleteCategory(context.Context, *NewsIdInt) (*CategoryResp, error)
	ReorderCategories(context.Context, *CategoriesReq) (*CategoriesResp, error)
	PublishNews(context.Context, *PublishNewsReq) (*NewsResp, error)
	EditNews(context.Context, *PublishNewsReq) (*NewsResp, error)
	DeleteNewsPost(context.Context, *NewsId) (*NewsResp, error)
	GetFeaturedNews(context.Context, *NewsEmpty) (*ListNewsViewResp, error)
	GetNewsBySlug(context.Context, *Slug) (*NewsViewResp, error)
	GetNewsById(context.Context, *NewsId) (*NewsViewResp, error)
	GetNewsCategory(context.Context, *NewsCategoryReq) (*ListNewsViewResp, error)
	GetNewsSubCategory(context.Context, *NewsCategoryReq) (*ListNewsViewResp, error)
	AdminSearchNews(context.Context, *AdminSearchNewsReq) (*ListNewsViewResp, error)
	AdminSearchNewsCount(context.Context, *AdminSearchNewsReq) (*NewsCountResp, error)
	AdminSearchRelatedNews(context.Context, *AdminSearchRelatedNewsReq) (*ListNewsViewResp, error)
	AdminSearchRelatedNewsCount(context.Context, *AdminSearchRelatedNewsReq) (*NewsCountResp, error)
	SearchNews(context.Context, *SearchNewsReq) (*ListNewsViewResp, error)
	SearchNewsCount(context.Context, *SearchNewsReq) (*NewsCountResp, error)
	GetNewsByTag(context.Context, *NewsTagReq) (*ListNewsViewResp, error)
	GetNewsByTagCount(context.Context, *NewsTagReq) (*NewsCountResp, error)
	GetRelatedNews(context.Context, *NewsId) (*ListNewsViewResp, error)
	GetNewsTags(context.Context, *NewsId) (*NewsTagsResp, error)
	GetTagsNews(context.Context, *NewsTagReq) (*TagNewsResp, error)
	GetTagsNewsCount(context.Context, *NewsTagReq) (*NewsCountResp, error)
	ReorderFeatured(context.Context, *NewsOrders) (*NewsOrdersResp, error)
	GetAllNewsUrls(context.Context, *NewsEmpty) (*NewsUrlsResp, error)
	mustEmbedUnimplementedNewsServiceServer()
}

// UnimplementedNewsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNewsServiceServer struct {
}

func (UnimplementedNewsServiceServer) GetAllCategories(context.Context, *NewsEmpty) (*CategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedNewsServiceServer) NewCategory(context.Context, *Category) (*CategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCategory not implemented")
}
func (UnimplementedNewsServiceServer) EditCategory(context.Context, *Category) (*CategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditCategory not implemented")
}
func (UnimplementedNewsServiceServer) DeleteCategory(context.Context, *NewsIdInt) (*CategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedNewsServiceServer) UndeleteCategory(context.Context, *NewsIdInt) (*CategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteCategory not implemented")
}
func (UnimplementedNewsServiceServer) ReorderCategories(context.Context, *CategoriesReq) (*CategoriesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderCategories not implemented")
}
func (UnimplementedNewsServiceServer) PublishNews(context.Context, *PublishNewsReq) (*NewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNews not implemented")
}
func (UnimplementedNewsServiceServer) EditNews(context.Context, *PublishNewsReq) (*NewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditNews not implemented")
}
func (UnimplementedNewsServiceServer) DeleteNewsPost(context.Context, *NewsId) (*NewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsPost not implemented")
}
func (UnimplementedNewsServiceServer) GetFeaturedNews(context.Context, *NewsEmpty) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturedNews not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsBySlug(context.Context, *Slug) (*NewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsBySlug not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsById(context.Context, *NewsId) (*NewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsById not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsCategory(context.Context, *NewsCategoryReq) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsCategory not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsSubCategory(context.Context, *NewsCategoryReq) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsSubCategory not implemented")
}
func (UnimplementedNewsServiceServer) AdminSearchNews(context.Context, *AdminSearchNewsReq) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSearchNews not implemented")
}
func (UnimplementedNewsServiceServer) AdminSearchNewsCount(context.Context, *AdminSearchNewsReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSearchNewsCount not implemented")
}
func (UnimplementedNewsServiceServer) AdminSearchRelatedNews(context.Context, *AdminSearchRelatedNewsReq) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSearchRelatedNews not implemented")
}
func (UnimplementedNewsServiceServer) AdminSearchRelatedNewsCount(context.Context, *AdminSearchRelatedNewsReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSearchRelatedNewsCount not implemented")
}
func (UnimplementedNewsServiceServer) SearchNews(context.Context, *SearchNewsReq) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNews not implemented")
}
func (UnimplementedNewsServiceServer) SearchNewsCount(context.Context, *SearchNewsReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchNewsCount not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsByTag(context.Context, *NewsTagReq) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsByTag not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsByTagCount(context.Context, *NewsTagReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsByTagCount not implemented")
}
func (UnimplementedNewsServiceServer) GetRelatedNews(context.Context, *NewsId) (*ListNewsViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedNews not implemented")
}
func (UnimplementedNewsServiceServer) GetNewsTags(context.Context, *NewsId) (*NewsTagsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewsTags not implemented")
}
func (UnimplementedNewsServiceServer) GetTagsNews(context.Context, *NewsTagReq) (*TagNewsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsNews not implemented")
}
func (UnimplementedNewsServiceServer) GetTagsNewsCount(context.Context, *NewsTagReq) (*NewsCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsNewsCount not implemented")
}
func (UnimplementedNewsServiceServer) ReorderFeatured(context.Context, *NewsOrders) (*NewsOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReorderFeatured not implemented")
}
func (UnimplementedNewsServiceServer) GetAllNewsUrls(context.Context, *NewsEmpty) (*NewsUrlsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNewsUrls not implemented")
}
func (UnimplementedNewsServiceServer) mustEmbedUnimplementedNewsServiceServer() {}

// UnsafeNewsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsServiceServer will
// result in compilation errors.
type UnsafeNewsServiceServer interface {
	mustEmbedUnimplementedNewsServiceServer()
}

func RegisterNewsServiceServer(s grpc.ServiceRegistrar, srv NewsServiceServer) {
	s.RegisterService(&NewsService_ServiceDesc, srv)
}

func _NewsService_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetAllCategories(ctx, req.(*NewsEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_NewCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).NewCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/NewCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).NewCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_EditCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).EditCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/EditCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).EditCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsIdInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).DeleteCategory(ctx, req.(*NewsIdInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_UndeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsIdInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).UndeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/UndeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).UndeleteCategory(ctx, req.(*NewsIdInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_ReorderCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).ReorderCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/ReorderCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).ReorderCategories(ctx, req.(*CategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_PublishNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).PublishNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/PublishNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).PublishNews(ctx, req.(*PublishNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_EditNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).EditNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/EditNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).EditNews(ctx, req.(*PublishNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_DeleteNewsPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).DeleteNewsPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/DeleteNewsPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).DeleteNewsPost(ctx, req.(*NewsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetFeaturedNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetFeaturedNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetFeaturedNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetFeaturedNews(ctx, req.(*NewsEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Slug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsBySlug(ctx, req.(*Slug))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsById(ctx, req.(*NewsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsCategory(ctx, req.(*NewsCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsSubCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsSubCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsSubCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsSubCategory(ctx, req.(*NewsCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_AdminSearchNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSearchNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).AdminSearchNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/AdminSearchNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).AdminSearchNews(ctx, req.(*AdminSearchNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_AdminSearchNewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSearchNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).AdminSearchNewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/AdminSearchNewsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).AdminSearchNewsCount(ctx, req.(*AdminSearchNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_AdminSearchRelatedNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSearchRelatedNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).AdminSearchRelatedNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/AdminSearchRelatedNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).AdminSearchRelatedNews(ctx, req.(*AdminSearchRelatedNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_AdminSearchRelatedNewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminSearchRelatedNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).AdminSearchRelatedNewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/AdminSearchRelatedNewsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).AdminSearchRelatedNewsCount(ctx, req.(*AdminSearchRelatedNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_SearchNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).SearchNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/SearchNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).SearchNews(ctx, req.(*SearchNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_SearchNewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNewsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).SearchNewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/SearchNewsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).SearchNewsCount(ctx, req.(*SearchNewsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsByTag(ctx, req.(*NewsTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsByTagCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsByTagCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsByTagCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsByTagCount(ctx, req.(*NewsTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetRelatedNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetRelatedNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetRelatedNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetRelatedNews(ctx, req.(*NewsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNewsTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNewsTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNewsTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNewsTags(ctx, req.(*NewsId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetTagsNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetTagsNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetTagsNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetTagsNews(ctx, req.(*NewsTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetTagsNewsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetTagsNewsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetTagsNewsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetTagsNewsCount(ctx, req.(*NewsTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_ReorderFeatured_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).ReorderFeatured(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/ReorderFeatured",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).ReorderFeatured(ctx, req.(*NewsOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetAllNewsUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetAllNewsUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetAllNewsUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetAllNewsUrls(ctx, req.(*NewsEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsService_ServiceDesc is the grpc.ServiceDesc for NewsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllCategories",
			Handler:    _NewsService_GetAllCategories_Handler,
		},
		{
			MethodName: "NewCategory",
			Handler:    _NewsService_NewCategory_Handler,
		},
		{
			MethodName: "EditCategory",
			Handler:    _NewsService_EditCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _NewsService_DeleteCategory_Handler,
		},
		{
			MethodName: "UndeleteCategory",
			Handler:    _NewsService_UndeleteCategory_Handler,
		},
		{
			MethodName: "ReorderCategories",
			Handler:    _NewsService_ReorderCategories_Handler,
		},
		{
			MethodName: "PublishNews",
			Handler:    _NewsService_PublishNews_Handler,
		},
		{
			MethodName: "EditNews",
			Handler:    _NewsService_EditNews_Handler,
		},
		{
			MethodName: "DeleteNewsPost",
			Handler:    _NewsService_DeleteNewsPost_Handler,
		},
		{
			MethodName: "GetFeaturedNews",
			Handler:    _NewsService_GetFeaturedNews_Handler,
		},
		{
			MethodName: "GetNewsBySlug",
			Handler:    _NewsService_GetNewsBySlug_Handler,
		},
		{
			MethodName: "GetNewsById",
			Handler:    _NewsService_GetNewsById_Handler,
		},
		{
			MethodName: "GetNewsCategory",
			Handler:    _NewsService_GetNewsCategory_Handler,
		},
		{
			MethodName: "GetNewsSubCategory",
			Handler:    _NewsService_GetNewsSubCategory_Handler,
		},
		{
			MethodName: "AdminSearchNews",
			Handler:    _NewsService_AdminSearchNews_Handler,
		},
		{
			MethodName: "AdminSearchNewsCount",
			Handler:    _NewsService_AdminSearchNewsCount_Handler,
		},
		{
			MethodName: "AdminSearchRelatedNews",
			Handler:    _NewsService_AdminSearchRelatedNews_Handler,
		},
		{
			MethodName: "AdminSearchRelatedNewsCount",
			Handler:    _NewsService_AdminSearchRelatedNewsCount_Handler,
		},
		{
			MethodName: "SearchNews",
			Handler:    _NewsService_SearchNews_Handler,
		},
		{
			MethodName: "SearchNewsCount",
			Handler:    _NewsService_SearchNewsCount_Handler,
		},
		{
			MethodName: "GetNewsByTag",
			Handler:    _NewsService_GetNewsByTag_Handler,
		},
		{
			MethodName: "GetNewsByTagCount",
			Handler:    _NewsService_GetNewsByTagCount_Handler,
		},
		{
			MethodName: "GetRelatedNews",
			Handler:    _NewsService_GetRelatedNews_Handler,
		},
		{
			MethodName: "GetNewsTags",
			Handler:    _NewsService_GetNewsTags_Handler,
		},
		{
			MethodName: "GetTagsNews",
			Handler:    _NewsService_GetTagsNews_Handler,
		},
		{
			MethodName: "GetTagsNewsCount",
			Handler:    _NewsService_GetTagsNewsCount_Handler,
		},
		{
			MethodName: "ReorderFeatured",
			Handler:    _NewsService_ReorderFeatured_Handler,
		},
		{
			MethodName: "GetAllNewsUrls",
			Handler:    _NewsService_GetAllNewsUrls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/news/proto/news_svc.proto",
}
